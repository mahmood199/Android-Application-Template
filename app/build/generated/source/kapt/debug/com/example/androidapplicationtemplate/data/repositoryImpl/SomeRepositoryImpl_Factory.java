// Generated by Dagger (https://dagger.dev).
package com.example.androidapplicationtemplate.data.repositoryImpl;

import com.example.androidapplicationtemplate.data.local.localDataSource.SomeLocalDataSource;
import com.example.androidapplicationtemplate.data.remote.remoteDataSource.SomeRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SomeRepositoryImpl_Factory implements Factory<SomeRepositoryImpl> {
  private final Provider<SomeLocalDataSource> localDataSourceProvider;

  private final Provider<SomeRemoteDataSource> remoteDataSourceProvider;

  public SomeRepositoryImpl_Factory(Provider<SomeLocalDataSource> localDataSourceProvider,
      Provider<SomeRemoteDataSource> remoteDataSourceProvider) {
    this.localDataSourceProvider = localDataSourceProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public SomeRepositoryImpl get() {
    return newInstance(localDataSourceProvider.get(), remoteDataSourceProvider.get());
  }

  public static SomeRepositoryImpl_Factory create(
      Provider<SomeLocalDataSource> localDataSourceProvider,
      Provider<SomeRemoteDataSource> remoteDataSourceProvider) {
    return new SomeRepositoryImpl_Factory(localDataSourceProvider, remoteDataSourceProvider);
  }

  public static SomeRepositoryImpl newInstance(SomeLocalDataSource localDataSource,
      SomeRemoteDataSource remoteDataSource) {
    return new SomeRepositoryImpl(localDataSource, remoteDataSource);
  }
}
